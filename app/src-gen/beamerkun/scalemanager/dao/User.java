package beamerkun.scalemanager.dao;

import java.util.List;
import beamerkun.scalemanager.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import java.util.Date;
// KEEP INCLUDES END
/**
 * Entity mapped to table "USER".
 */
public class User {

    private Long id;
    private Integer height;
    private java.util.Date birthday;
    private Boolean isMale;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserDao myDao;

    private List<Measurement> measurements;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public User() {
    }

    public User(Long id) {
        this.id = id;
    }

    public User(Long id, Integer height, java.util.Date birthday, Boolean isMale) {
        this.id = id;
        this.height = height;
        this.birthday = birthday;
        this.isMale = isMale;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getHeight() {
        return height;
    }

    public void setHeight(Integer height) {
        this.height = height;
    }

    public java.util.Date getBirthday() {
        return birthday;
    }

    public void setBirthday(java.util.Date birthday) {
        this.birthday = birthday;
    }

    public Boolean getIsMale() {
        return isMale;
    }

    public void setIsMale(Boolean isMale) {
        this.isMale = isMale;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Measurement> getMeasurements() {
        if (measurements == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MeasurementDao targetDao = daoSession.getMeasurementDao();
            List<Measurement> measurementsNew = targetDao._queryUser_Measurements(id);
            synchronized (this) {
                if(measurements == null) {
                    measurements = measurementsNew;
                }
            }
        }
        return measurements;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMeasurements() {
        measurements = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public byte[] toByteArray() {
        byte[] array = new byte[5];
        array[0] = (byte) (isMale ? 0x10 : 0x00);
        array[1] = 0x00;
        array[2] = 0x00;
        int age = (int) Math.floor((new Date().getTime() - birthday.getTime())/3.156e+10);
        array[3] = (byte) age;
        array[4] = height.byteValue();
        return array;
    }
    // KEEP METHODS END

}
